[
{
  "question": ".orElse(\"default\")",
  "answer": "or \"default\"",
  "wrongAnswers": [".or_else(\"default\")", ".or_else(\"default\")", ".or(\"default\")"]
},
{
  "question": ".isPresent()",
  "answer": "!= None",
  "wrongAnswers": [".is_none()", ".is_not_present()", ".present()"]
},
{
  "question": ".get()",
  "answer": "",
  "wrongAnswers": [".fetch()", ".retrieve()", ".value()"]
},
{
  "question": ".orElseGet(() -> \"default\")",
  "answer": "or \"default\"",
  "wrongAnswers": [".or_else(\"default\")", ".or_else(\"default\")", ".or(\"default\")"]
},
{
  "question": ".ifPresent(value -> System.out.println(value))",
  "answer": "if value: \n    print(value)",
  "wrongAnswers": ["if value: \n    System.out.println(value)", "ifPresent(System.out.println(value))", "ifPresent(value -> System.out.println(value))"]
},
{
  "question": ".filter(value -> value > 10)",
  "answer": "filter(lambda value: value > 10)",
  "wrongAnswers": ["filter(value -> value > 10)", "filter(value > 10)", "filter(value => value > 10)"]
},
{
  "question": ".map(value -> value * 2)",
  "answer": "map(lambda value: value * 2)",
  "wrongAnswers": ["map(value -> value * 2)", "map(value * 2)", "map(value => value * 2)"]
},
{
  "question": ".flatMap(Stream::ofNullable)",
  "answer": "flatMap(lambda value: [value] if value is not None else [])",
  "wrongAnswers": [".flat_map(lambda value: [value] if value is not None else [])", ".flat_map(Stream::ofNullable)", ".flat_map(Stream::ofNullable)"]
},
{
  "question": ".orElseThrow(() -> new RuntimeException(\"Error\"))",
  "answer": "or_raise(RuntimeError(\"Error\"))",
  "wrongAnswers": [".or_throw(RuntimeError(\"Error\"))", ".or_throw(RuntimeError('Error'))", ".throw(RuntimeError(\"Error\"))"]
},
{
  "question": ".empty()",
  "answer": "None",
  "wrongAnswers":[".none()", ".nil()", ".no_value()"]
}
]